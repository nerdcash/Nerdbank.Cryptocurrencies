<Project>
  <PropertyGroup>
    <RustIntermediateDirBase>$(RepoRootPath)obj/src/nerdbank-zcash-rust/</RustIntermediateDirBase>
    <RustOutputDirBase>$(RepoRootPath)src/nerdbank-zcash-rust/target/</RustOutputDirBase>
    <RustConfiguration>$(Configuration.ToLower())</RustConfiguration>

    <IsMobileAppProject Condition="'$(IncludeAndroidBinaries)'=='true' or '$(IncludeiOSBinaries)'=='true'">true</IsMobileAppProject>

    <RustOutputWindowsArm64>$(RustOutputDirBase)aarch64-pc-windows-msvc/$(RustConfiguration)/nerdbank_zcash_rust.dll</RustOutputWindowsArm64>
    <RustOutputWindowsArm64Pdb>$(RustOutputDirBase)aarch64-pc-windows-msvc/$(RustConfiguration)/nerdbank_zcash_rust.pdb</RustOutputWindowsArm64Pdb>
    <RustOutputWindowsX64>$(RustOutputDirBase)x86_64-pc-windows-msvc/$(RustConfiguration)/nerdbank_zcash_rust.dll</RustOutputWindowsX64>
    <RustOutputWindowsX64Pdb>$(RustOutputDirBase)x86_64-pc-windows-msvc/$(RustConfiguration)/nerdbank_zcash_rust.pdb</RustOutputWindowsX64Pdb>

    <RustOutputLinuxArm64>$(RustOutputDirBase)aarch64-unknown-linux-gnu/$(RustConfiguration)/libnerdbank_zcash_rust.so</RustOutputLinuxArm64>
    <RustOutputLinuxX64>$(RustOutputDirBase)x86_64-unknown-linux-gnu/$(RustConfiguration)/libnerdbank_zcash_rust.so</RustOutputLinuxX64>

    <RustOutputOsxArm64>$(RustOutputDirBase)aarch64-apple-darwin/$(RustConfiguration)/libnerdbank_zcash_rust.dylib</RustOutputOsxArm64>
    <RustOutputOsxX64>$(RustOutputDirBase)x86_64-apple-darwin/$(RustConfiguration)/libnerdbank_zcash_rust.dylib</RustOutputOsxX64>

    <RustOutputAndroidArm64>$(RustOutputDirBase)aarch64-linux-android/$(RustConfiguration)/libnerdbank_zcash_rust.so</RustOutputAndroidArm64>
    <RustOutputAndroidX64>$(RustOutputDirBase)x86_64-linux-android/$(RustConfiguration)/libnerdbank_zcash_rust.so</RustOutputAndroidX64>

    <iOSFrameworkName>nerdbank_zcash_rust.xcframework</iOSFrameworkName>
    <iOSFrameworkPath>$(RepoRootPath)bin/$(RustConfiguration)/$(iOSFrameworkName)</iOSFrameworkPath>
  </PropertyGroup>
  <PropertyGroup Condition="'$(IsMobileAppProject)'!='true'">
    <IncludeWindowsBinaries Condition="$([MSBuild]::IsOsPlatform('Windows'))">true</IncludeWindowsBinaries>
    <IncludeLinuxBinaries Condition="$([MSBuild]::IsOsPlatform('Linux'))">true</IncludeLinuxBinaries>
    <IncludeOsxBinaries Condition="$([MSBuild]::IsOsPlatform('OSX'))">true</IncludeOsxBinaries>
  </PropertyGroup>
  <ItemDefinitionGroup>
    <RustBinary>
      <IsMobileTarget>true</IsMobileTarget>
    </RustBinary>
  </ItemDefinitionGroup>
  <!-- This file is imported by the the packaging project, app projects, and by the test project.
       In the case of the packaging project we want all native files included.
       But in the case of the app or test project, we only want the one that matches the platform. -->
  <ItemGroup>
    <!-- Windows -->
    <RustBinary Condition="'$(IsPackable)'=='true' or ('$(PlatformTarget)'=='arm64' and '$(IncludeWindowsBinaries)'=='true')" Include="$(RustOutputWindowsArm64)">
      <PackagePath>runtimes/win-arm64/native/</PackagePath>
    </RustBinary>
    <RustSymbol Condition="'$(IsPackable)'=='true' or ('$(PlatformTarget)'=='arm64' and '$(IncludeWindowsBinaries)'=='true')" Include="$(RustOutputWindowsArm64Pdb)">
      <PackagePath>runtimes/win-arm64/native/</PackagePath>
    </RustSymbol>
    <RustBinary Condition="'$(IsPackable)'=='true' or ('$(PlatformTarget)'=='x64' and '$(IncludeWindowsBinaries)'=='true')" Include="$(RustOutputWindowsX64)">
      <PackagePath>runtimes/win-x64/native/</PackagePath>
    </RustBinary>
    <RustSymbol Condition="'$(IsPackable)'=='true' or ('$(PlatformTarget)'=='x64' and '$(IncludeWindowsBinaries)'=='true')" Include="$(RustOutputWindowsX64Pdb)">
      <PackagePath>runtimes/win-x64/native/</PackagePath>
    </RustSymbol>

    <!-- Linux -->
    <RustBinary Condition="'$(IsPackable)'=='true' or ('$(PlatformTarget)'=='arm64' and '$(IncludeLinuxBinaries)'=='true')" Include="$(RustOutputLinuxArm64)">
      <PackagePath>runtimes/linux-arm64/native/</PackagePath>
    </RustBinary>
    <RustBinary Condition="'$(IsPackable)'=='true' or ('$(PlatformTarget)'=='x64' and '$(IncludeLinuxBinaries)'=='true')" Include="$(RustOutputLinuxX64)">
      <PackagePath>runtimes/linux-x64/native/</PackagePath>
    </RustBinary>

    <!-- Android -->
    <RustBinary Condition="'$(IsPackable)'=='true' or ('$(PlatformTarget)'=='arm64' and '$(IncludeAndroidBinaries)'=='true')" Include="$(RustOutputAndroidArm64)">
      <PackagePath>runtimes/android-arm64/native/</PackagePath>
    </RustBinary>
    <RustBinary Condition="'$(IsPackable)'=='true' or ('$(PlatformTarget)'=='arm64' and '$(IncludeAndroidBinaries)'=='true')" Include="$(RustOutputAndroidX64)">
      <PackagePath>runtimes/android-x64/native/</PackagePath>
    </RustBinary>

    <!-- Mac -->
    <RustBinary Condition="'$(IsPackable)'=='true' or ('$(PlatformTarget)'=='arm64' and '$(IncludeOsxBinaries)'=='true')" Include="$(RustOutputOsxArm64)">
      <PackagePath>runtimes/osx-arm64/native/</PackagePath>
    </RustBinary>
    <RustBinary Condition="'$(IsPackable)'=='true' or ('$(PlatformTarget)'=='x64' and '$(IncludeOsxBinaries)'=='true')" Include="$(RustOutputOsxX64)">
      <PackagePath>runtimes/osx-x64/native/</PackagePath>
    </RustBinary>

    <!-- iOS -->
    <!-- The '$(BuildingInsideVisualStudio)'!='true' condition is a workaround because CPS fails to load the project when this item exists. -->
    <RustBinary Condition="'$(BuildingInsideVisualStudio)'!='true' and ('$(IsPackable)'=='true' or '$(IncludeiOSBinaries)'=='true')" Include="$(iOSFrameworkPath)/**">
      <PackagePath>lib/net9.0-ios18.0/Nerdbank.Zcash.resources/$(iOSFrameworkName)/</PackagePath>
      <Visible>false</Visible>
    </RustBinary>
    <RustBinary Condition="'$(IsPackable)'=='true' or '$(IncludeiOSBinaries)'=='true'" Include="$(RepoRootPath).github/manifest">
      <PackagePath>lib/net9.0-ios18.0/Nerdbank.Zcash.resources/</PackagePath>
      <Visible>false</Visible>
    </RustBinary>
  </ItemGroup>
  <ItemGroup>
    <!-- Do not include rust symbols in the snupkg because nuget.org will reject the whole package as it only supports portable pdbs. -->
    <!-- <TfmSpecificDebugSymbolsFile Include="@(RustSymbol)" Condition="'$(TargetFramework)'=='net9.0'">
      <TargetPath>/%(PackagePath)%(FileName)%(Extension)</TargetPath>
      <TargetFramework>native</TargetFramework>
    </TfmSpecificDebugSymbolsFile> -->
    <None Include="@(RustBinary)">
      <!-- Copy to output directory except for the nuget package project and mobile apps. -->
      <CopyToOutputDirectory Condition="'$(IsPackable)'=='false' and '$(IsMobileAppProject)'!='true'">PreserveNewest</CopyToOutputDirectory>
      <!-- When building a packing project, we may have many duplicate filenames, so represent them in Solution Explorer in their tree. -->
      <Link Condition="'$(IsPackable)'=='true'">%(PackagePath)</Link>
      <!-- When building a test or app project, we want to copy the file directly to the output directory. -->
      <Link Condition="'$(IsPackable)'!='true'">%(FileName)%(Extension)</Link>
      <Pack>true</Pack>
    </None>
  </ItemGroup>
  <ItemGroup Condition="'$(IncludeiOSBinaries)'=='true'">
    <NativeReference Include="$(iOSFrameworkPath)">
      <Kind>Framework</Kind>
    </NativeReference>
  </ItemGroup>
  <ItemGroup Condition="'$(IncludeAndroidBinaries)'=='true'">
    <AndroidNativeLibrary Include="$(RustOutputAndroidArm64)" Abi="arm64-v8a" />
    <AndroidNativeLibrary Include="$(RustOutputAndroidX64)" Abi="x86_64" />
  </ItemGroup>
  <ItemGroup>
    <Rust3rdPartyNotices Include="
      $(RustIntermediateDirBase)THIRD_PARTY_DEPENDENCIES.txt;
      $(RustIntermediateDirBase)THIRD_PARTY_LICENSES.yml;
      ">
      <PackagePath></PackagePath>
    </Rust3rdPartyNotices>
    <None Include="@(Rust3rdPartyNotices)">
      <!-- When building a packing project, we may have many duplicate filenames, so represent them in Solution Explorer in their tree. -->
      <Link Condition="'$(IsPackable)'=='true'">%(PackagePath)</Link>
      <!-- When building a test or app project, we want to copy the file directly to the output directory. -->
      <Link Condition="'$(IsPackable)'!='true'">%(FileName)%(Extension)</Link>
      <Pack>true</Pack>
      <Visible>false</Visible>
    </None>
  </ItemGroup>
  <Target Name="WarnOnMissingBinaries" BeforeTargets="_GetPackageFiles">
    <ItemGroup>
      <MissingRustBinaries Include="@(RustBinary);@(RustSymbol);@(Rust3rdPartyNotices)" Condition="!Exists('%(Identity)')" />
      <None Remove="@(MissingRustBinaries)" />
    </ItemGroup>
    <Warning Text="The following Rust binaries were not found: @(MissingRustBinaries)" Condition="'@(MissingRustBinaries)' != ''" />
  </Target>
</Project>
