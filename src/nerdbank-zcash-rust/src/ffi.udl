[Error]
interface LightWalletError {
	InvalidArgument(string message);
	InvalidUri();
	SqliteClientError(string message);
	Canceled();
	SyncFirst();
	InsufficientFunds(u64 required, u64 available);
	Other(string message);
};

enum ChainType {
	"Testnet",
	"Mainnet",
};

enum Pool {
	"Transparent",
	"Sapling",
	"Orchard",
};

dictionary AccountInfo {
	u32 id;
	string? uvk;
	BirthdayHeights birthday_heights;
};

dictionary Transaction {
	u32 account_id;
	bytes txid;
	timestamp? block_time;
	u32? mined_height;
	boolean expired_unmined;
	i64 account_balance_delta;
	u64? fee;
	sequence<TransactionNote> outgoing;
	sequence<TransactionNote> incoming;
	sequence<TransactionNote> change;
};

dictionary TransparentNote {
	u64 value;
	string recipient;
};

dictionary TransactionNote {
	u64 value;
	bytes? memo;
	string recipient;
	Pool pool;
};

dictionary TransactionSendDetail {
	u64 value;
	bytes? memo;
	string recipient;
};

dictionary UserBalances {
	u64 spendable;
	u64 immature_change;
	u64 minimum_fees;
	u64 immature_income;
	u64 dust;
	u64 incoming;
	u64 incoming_dust;
};

dictionary BirthdayHeights {
	u32 original_birthday_height;
	u32? birthday_height;
	u32? rebirth_height;
};

dictionary DbInit {
	string data_file;
	ChainType network;
	u32 min_confirmations;
};

dictionary SendTransactionResult {
	bytes txid;
};

dictionary SendDetails {
	u64 fee;
};

dictionary SyncUpdateData {
	u32? last_fully_scanned_block;
	u32 tip_height;
	u64 current_step;
	u64 total_steps;
	string? last_error;
};

callback interface SyncUpdate {
	void update_status(SyncUpdateData data);
	void report_transactions(sequence<Transaction> transactions);
};

callback interface CancellationSource {
	void set_cancellation_id(u32 id);
};

namespace LightWallet {
	[Throws=LightWalletError]
	void cancel(u32 id);

	[Throws=LightWalletError]
	void init(DbInit config);

	[Throws=LightWalletError]
	u32 add_account(DbInit config, string uri, bytes seed, u32 account_index, u32? birthday_height, CancellationSource? cancellation);

	[Throws=LightWalletError]
	u32 import_account_ufvk(DbInit config, string uri, string ufvk, boolean spending_key_available, u32? birthday_height, CancellationSource? cancellation);

	[Throws=LightWalletError]
	sequence<AccountInfo> get_accounts(DbInit config);

	/// Gets the oldest birthday height for any account in the wallet.
	[Throws=LightWalletError]
	u32? get_birthday_height(DbInit config);

	[Throws=LightWalletError]
	u32? get_min_unspent_height(DbInit config);

	[Throws=LightWalletError]
	u32 get_block_height(string uri, CancellationSource? cancellation);

	[Throws=LightWalletError]
	u32? get_sync_height(DbInit config);

	/// Downloads blocks from the blockchain, scans them for transactions, and updates the database.
	/// If `continually` is `true`, this function will never exit unless cancellation is signaled.
	[Throws=LightWalletError]
	SyncUpdateData sync(DbInit config, string uri, SyncUpdate? progress, boolean continually, CancellationSource? cancellation);

	[Throws=LightWalletError]
	boolean disconnect_server(string uri);

	/// Constructs a proposal for how a given spend can be executed, and returns details for how it would work.
	[Throws=LightWalletError]
	SendDetails simulate_send(DbInit config, string ufvk, sequence<TransactionSendDetail> send_details);

	[Throws=LightWalletError]
	sequence<SendTransactionResult> send(DbInit config, string uri, bytes usk, sequence<TransactionSendDetail> send_details);

	[Throws=LightWalletError]
	sequence<TransparentNote> get_unshielded_utxos(DbInit config, u32 account_id);

	[Throws=LightWalletError]
	sequence<SendTransactionResult> shield(DbInit config, string uri, bytes usk, string address);

	[Throws=LightWalletError]
	sequence<Transaction> get_transactions(DbInit config, u32 account_id, u32 starting_block);

	[Throws=LightWalletError]
	UserBalances get_user_balances(DbInit config, u32 account_id);

	[Throws=LightWalletError]
	BirthdayHeights get_birthday_heights(DbInit config, u32 account_id);

	[Throws=LightWalletError]
	string add_diversifier(DbInit config, u32 account_id, bytes diversifier_index);

	/// Resets the database to consider the specified block height to be the tip, such that the next
	/// scan begins from there.
	/// The block height must be either within 100 of the current tip (get_block_height)
	/// so no greater than the oldest unspent input (get_min_unspent_height).
	[Throws=LightWalletError]
	void rescan(DbInit config, u32 block_height);
};
